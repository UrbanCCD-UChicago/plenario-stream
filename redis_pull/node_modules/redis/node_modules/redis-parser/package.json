{
  "name": "redis-parser",
  "version": "2.0.3",
  "description": "Javascript Redis protocol (RESP) parser",
  "main": "index.js",
  "scripts": {
    "test": "npm run coverage",
    "benchmark": "node ./benchmark",
    "posttest": "standard && npm run coverage:check",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover --preserve-comments ./node_modules/mocha/bin/_mocha -- -R spec",
    "coverage:check": "node ./node_modules/istanbul/lib/cli.js check-coverage --branch 100 --statement 100"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NodeRedis/node-redis-parser.git"
  },
  "keywords": [
    "redis",
    "protocol",
    "parser",
    "database",
    "javascript",
    "node",
    "nodejs",
    "resp",
    "hiredis"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "benchmark": "^2.1.0",
    "codeclimate-test-reporter": "^0.3.1",
    "intercept-stdout": "^0.1.2",
    "istanbul": "^0.4.0",
    "standard": "^7.0.1",
    "mocha": "^2.3.2",
    "hiredis": "^0.5.0"
  },
  "author": {
    "name": "Ruben Bridgewater"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/NodeRedis/node-redis-parser/issues"
  },
  "homepage": "https://github.com/NodeRedis/node-redis-parser#readme",
  "directories": {
    "test": "test",
    "lib": "lib"
  },
  "readme": "[![Build Status](https://travis-ci.org/NodeRedis/node-redis-parser.png?branch=master)](https://travis-ci.org/NodeRedis/node-redis-parser)\n[![Code Climate](https://codeclimate.com/github/NodeRedis/node-redis-parser/badges/gpa.svg)](https://codeclimate.com/github/NodeRedis/node-redis-parser)\n[![Test Coverage](https://codeclimate.com/github/NodeRedis/node-redis-parser/badges/coverage.svg)](https://codeclimate.com/github/NodeRedis/node-redis-parser/coverage)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n# redis-parser\n\nA high performance javascript redis parser built for [node_redis](https://github.com/NodeRedis/node_redis) and [ioredis](https://github.com/luin/ioredis). Parses all [RESP](http://redis.io/topics/protocol) data.\n\n## Install\n\nInstall with [NPM](https://npmjs.org/):\n\n```\nnpm install redis-parser\n```\n\n## Usage\n\n```js\nvar Parser = require('redis-parser');\n\nvar myParser = new Parser(options);\n```\n\n### Possible options\n\n* `returnReply`: *function*; mandatory\n* `returnError`: *function*; mandatory\n* `returnFatalError`: *function*; optional, defaults to the returnError function\n* `returnBuffers`: *boolean*; optional, defaults to false\n\n### Example\n\n```js\nvar Parser = require(\"redis-parser\");\n\nfunction Library () {}\n\nLibrary.prototype.returnReply = function (reply) { ... }\nLibrary.prototype.returnError = function (err) { ... }\nLibrary.prototype.returnFatalError = function (err) { ... }\n\nvar lib = new Library();\n\nvar parser = new Parser({\n    returnReply: function(reply) {\n        lib.returnReply(reply);\n    },\n    returnError: function(err) {\n        lib.returnError(err);\n    },\n    returnFatalError: function (err) {\n        lib.returnFatalError(err);\n    }\n});\n\nLibrary.prototype.streamHandler = function () {\n    this.stream.on('data', function (buffer) {\n        // Here the data (e.g. `new Buffer('$5\\r\\nHello\\r\\n'`)) is passed to the parser and the result is passed to either function depending on the provided data.\n        parser.execute(buffer);\n    });\n};\n```\nYou do not have to use the returnFatalError function. Fatal errors will be returned in the normal error function in that case.\n\nAnd if you want to return buffers instead of strings, you can do this by adding the `returnBuffers` option.\n\nBig numbers that are too large for JS are automatically stringified.\n\n```js\n// Same functions as in the first example\n\nvar parser = new Parser({\n    returnReply: function(reply) {\n        lib.returnReply(reply);\n    },\n    returnError: function(err) {\n        lib.returnError(err);\n    },\n    returnBuffers: true // All strings are returned as buffer e.g. <Buffer 48 65 6c 6c 6f>\n});\n\n// The streamHandler as above\n```\n\n## Protocol errors\n\nTo handle protocol errors (this is very unlikely to happen) gracefully you should add the returnFatalError option, reject any still running command (they might have been processed properly but the reply is just wrong), destroy the socket and reconnect. Note that while doing this no new command may be added, so all new commands have to be buffered in the meantime, otherwise a chunk might still contain partial data of a following command that was already processed properly but answered in the same chunk as the command that resulted in the protocol error.\n\n## Contribute\n\nThe parser is highly optimized but there may still be further optimizations possible.\n\n```\nnpm install\nnpm test\nnpm run benchmark\n```\n\n## License\n\n[MIT](./LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "redis-parser@2.0.3",
  "dist": {
    "shasum": "59c5f2fb31f64990946e432374abc9746093b00e"
  },
  "_from": "redis-parser@^2.0.0",
  "_resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-2.0.3.tgz"
}
