{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "The Amazon Kinesis click stream sample for Node.js KCL.",

  "Parameters" : {
    "ProducerInstanceType" : {
      "Description" : "EC2 instance type for producer node",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge" ],
      "ConstraintDescription" : "must be a supported EC2 instance type for this template."
    },

    "ConsumerInstanceType" : {
      "Description" : "EC2 instance type for consumer node",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge" ],
      "ConstraintDescription" : "must be a supported EC2 instance type for this template."
    },

    "ProducerClusterSize" : {
      "Description" : "Total producer instances",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "1"
    },

    "ConsumerClusterSize" : {
      "Description" : "Total consumer instances",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "1"
    },

    "NumberOfShards" : {
      "Description" : "Total shards for the kinesis stream this stack creates.",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "2"
    },

    "ProducerPutRecordsBatchSize" : {
      "Description" : "Total number of records to batch per putRecords API call to Kinesis.",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "5"
    },

    "ProducerPutRecordsTps" : {
      "Description" : "Transactions per second for PutRecords API.",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "20"
    },

    "S3BufferSizeInBytes" : {
      "Description" : "Maximum buffer size on consumer before putting data in S3. Defaults to 1MB.",
      "Type" : "Number",
      "MinValue" : "1",
      "Default" : "1048576"
    },

    "S3BucketName" : {
      "Description" : "S3 bucket to send batch of processed click-stream data from consumer.",
      "Type" : "String",
      "Default" : "",
      "MinLength" : "0",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "KeyName" : {
      "Description" : "(Optional) Name of an existing EC2 KeyPair to enable SSH access to the instance. If this is not provided you will not be able to SSH on to the EC2 instance.",
      "Type" : "String",
      "Default" : "",
      "MinLength" : "0",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Conditions": {
    "UseEC2KeyName": {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "KeyName"}, ""]}]}
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64" },
      "t2.small"    : { "Arch" : "HVM64" },
      "t2.medium"   : { "Arch" : "HVM64" },
      "m3.medium"   : { "Arch" : "HVM64" },
      "m3.large"    : { "Arch" : "HVM64" },
      "m3.xlarge"   : { "Arch" : "HVM64" },
      "m3.2xlarge"  : { "Arch" : "HVM64" },
      "c3.large"    : { "Arch" : "HVM64" },
      "c3.xlarge"   : { "Arch" : "HVM64" },
      "c3.2xlarge"  : { "Arch" : "HVM64" },
      "c3.4xlarge"  : { "Arch" : "HVM64" },
      "c3.8xlarge"  : { "Arch" : "HVM64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "HVM64" : "ami-146e2a7c" },
      "us-west-1"      : { "HVM64" : "ami-42908907" },
      "us-west-2"      : { "HVM64" : "ami-dfc39aef" },
      "eu-west-1"      : { "HVM64" : "ami-9d23aeea" },
      "eu-central-1"   : { "HVM64" : "ami-04003319" },
      "ap-southeast-1" : { "HVM64" : "ami-96bb90c4" },
      "ap-southeast-2" : { "HVM64" : "ami-d50773ef" },
      "ap-northeast-1" : { "HVM64" : "ami-18869819" }
    }
  },

  "Resources" : {
    "Ec2SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress" :
          [{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"} },
           { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}]
      }
    },

    "KinesisStream" : {
      "Type" : "AWS::Kinesis::Stream",
      "Properties" : {
        "ShardCount" : { "Ref" : "NumberOfShards" }
      }
    },

    "KCLDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "leaseKey",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "leaseKey",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "10",
          "WriteCapacityUnits" : "5"
        }
      }
    },

    "S3Bucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {"Ref":"S3BucketName"}
      },
      "DeletionPolicy" : "Delete"
    },

    "RootRole": {
       "Type" : "AWS::IAM::Role",
       "Properties" : {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement" : [ {
                "Effect" : "Allow",
                "Principal" : {
                   "Service" : [ "ec2.amazonaws.com" ]
                },
                "Action" : [ "sts:AssumeRole" ]
             } ]
          },
          "Path" : "/"
       }
    },

    "RolePolicies" : {
       "Type" : "AWS::IAM::Policy",
       "Properties" : {
          "PolicyName" : "root",
          "PolicyDocument" : {
             "Version" : "2012-10-17",
             "Statement" : [ {
                "Effect" : "Allow",
                "Action" : "kinesis:*",
                "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStream" } ]]}
             }, {
                "Effect" : "Allow",
                "Action" : "dynamodb:*",
                "Resource" : { "Fn::Join" : [ "", [ "arn:aws:dynamodb:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":table/", { "Ref" : "KCLDynamoDBTable" } ]]}
             }, {
                "Effect" : "Allow",
                "Action" : "cloudwatch:*",
                "Resource" : "*"
             }, {
                "Effect" : "Allow",
                "Action" : "s3:*",
                "Resource" : "*"
             }
             ]
          },
          "Roles" : [ { "Ref": "RootRole" } ]
       }
    },

    "RootInstanceProfile" : {
       "Type" : "AWS::IAM::InstanceProfile",
       "Properties" : {
          "Path" : "/",
          "Roles" : [ { "Ref": "RootRole" } ]
       }
    },

    "ConsumerCluster" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
        "LaunchConfigurationName" : { "Ref" : "ConsumerLaunchConfig"  },
        "MinSize" : { "Ref" : "ConsumerClusterSize" },
        "MaxSize" : { "Ref" : "ConsumerClusterSize" },
        "DesiredCapacity" : { "Ref" : "ConsumerClusterSize" },
        "Tags" : [
          { "Key" : "ApplicationRole", "Value" : "NodeJSClickStreamConsumer", "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "ConsumerLaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment:" : "Run consumer for kinesis NodeJS-KCL ClickStream example.",
        "AWS::CloudFormation::Init" : {
          "config" : {
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Fn::If" : [ "UseEC2KeyName", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" } ]},
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "ConsumerInstanceType" },
                                          "Arch" ] } ] },
        "InstanceType" : { "Ref" : "ConsumerInstanceType" },
        "SecurityGroups" : [{ "Ref" : "Ec2SecurityGroup" }],
        "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "cd /home/ec2-user\n",
          "yum install -y nodejs npm --enablerepo=epel\n",
          "yum install -y git\n",
          "git clone https://github.com/awslabs/amazon-kinesis-client-nodejs\n",
          "chown -R ec2-user:ec2-user /home/ec2-user/amazon-kinesis-client-nodejs\n",
          "cd amazon-kinesis-client-nodejs\n",
          "npm install\n",
          "cd samples/click_stream_sample/consumer\n",
          "export NODE_LOG_DIR='logs'\n",
          "mkdir logs\n",
          "sed 's/streamName = kclnodejsclickstreamsample/streamName = ", { "Ref" : "KinesisStream"}, "/g' -i sample.properties\n",
          "sed 's/applicationName = kclnodejsclickstreamsample/applicationName = ", { "Ref" : "KCLDynamoDBTable"}, "/g' -i sample.properties\n",
          "sed 's/regionName = us-east-1/regionName = ", { "Ref" : "AWS::Region"}, "/g' -i sample.properties\n",
          "sed 's/kinesis-clickstream-batchdata/", { "Ref" : "S3Bucket" }, "/g' -i config.js\n",
          "sed 's/maxBufferSize : 1024 \\* 1024/maxBufferSize : ", { "Ref" : "S3BufferSizeInBytes" }, "/g' -i config.js\n",
          "../../../bin/kcl-bootstrap -e --java /usr/bin/java --properties ./sample.properties > consumer.out 2>&1 &\n"
        ]]}}
      }
    },

    "ProducerCluster" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
        "LaunchConfigurationName" : { "Ref" : "ProducerLaunchConfig"  },
        "MinSize" : { "Ref" : "ProducerClusterSize" },
        "MaxSize" : { "Ref" : "ProducerClusterSize" },
        "DesiredCapacity" : { "Ref" : "ProducerClusterSize" },
        "Tags" : [
          { "Key" : "ApplicationRole", "Value" : "NodeJSClickStreamProducer", "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "ProducerLaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment:" : "Run producer for kinesis NodeJS-KCL ClickStream example.",
        "AWS::CloudFormation::Init" : {
          "config" : {
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Fn::If" : [ "UseEC2KeyName", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" } ]},
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "ProducerInstanceType" },
                                          "Arch" ] } ] },
        "InstanceType" : { "Ref" : "ProducerInstanceType" },
        "SecurityGroups" : [{ "Ref" : "Ec2SecurityGroup" }],
        "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "cd /home/ec2-user\n",
          "yum install -y nodejs npm --enablerepo=epel\n",
          "yum install -y git\n",
          "git clone https://github.com/awslabs/amazon-kinesis-client-nodejs\n",
          "chown -R ec2-user:ec2-user /home/ec2-user/amazon-kinesis-client-nodejs\n",
          "cd amazon-kinesis-client-nodejs\n",
          "npm install\n",
          "cd samples/click_stream_sample/producer\n",
          "export NODE_LOG_DIR='logs'\n",
          "mkdir logs\n",
          "sed 's/kclnodejsclickstreamsample/", { "Ref" : "KinesisStream" }, "/g' -i config.js\n",
          "sed 's/us-east-1/", { "Ref" : "AWS::Region" }, "/g' -i config.js\n",
          "sed 's/recordsToWritePerBatch : 5/recordsToWritePerBatch : ", { "Ref" : "ProducerPutRecordsBatchSize" }, "/g' -i config.js\n",
          "sed 's/shards : 2/shards : ", { "Ref" : "NumberOfShards" }, "/g' -i config.js\n",
          "sed 's/putRecordsTps : 20/putRecordsTps : ", { "Ref" : "ProducerPutRecordsTps" }, "/g' -i config.js\n",
          "node click_stream_producer_app.js &\n"
        ]]}}
      }
    }
  },
  "Outputs" : {
    "StreamName" : {
      "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStream'",
      "Value" : { "Ref" : "KinesisStream" }
    },
    "DynamoDBTableForKCL" : {
      "Description" : "The DynamoDB table name to store KCL metadata. This was autogenerated by the DynamoDB Resource named 'KCLDynamoDBTable'",
      "Value" : { "Ref" : "KCLDynamoDBTable" }
    },
    "S3Bucket" : {
      "Description" : "The name of the bucket where click stream data is stored from consumer. This was autogenerated by the S3 Resource named 'S3Bucket'",
      "Value" : { "Ref" : "S3Bucket" }
    }
  }
}
